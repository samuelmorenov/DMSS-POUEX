/**
 */
package POUEX.provider;

import POUEX.util.POUEXAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class POUEXItemProviderAdapterFactory extends POUEXAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable
{
  /**
   * This keeps track of the root adapter factory that delegates to this adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ComposedAdapterFactory parentAdapterFactory;

  /**
   * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected IChangeNotifier changeNotifier = new ChangeNotifier();

  /**
   * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected Collection<Object> supportedTypes = new ArrayList<Object>();

  /**
   * This constructs an instance.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public POUEXItemProviderAdapterFactory()
  {
    supportedTypes.add(IEditingDomainItemProvider.class);
    supportedTypes.add(IStructuredItemContentProvider.class);
    supportedTypes.add(ITreeItemContentProvider.class);
    supportedTypes.add(IItemLabelProvider.class);
    supportedTypes.add(IItemPropertySource.class);
  }

  /**
   * This keeps track of the one adapter used for all {@link POUEX.Mascota} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected MascotaItemProvider mascotaItemProvider;

  /**
   * This creates an adapter for a {@link POUEX.Mascota}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createMascotaAdapter()
  {
    if (mascotaItemProvider == null)
    {
      mascotaItemProvider = new MascotaItemProvider(this);
    }

    return mascotaItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link POUEX.Caracteristicas} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected CaracteristicasItemProvider caracteristicasItemProvider;

  /**
   * This creates an adapter for a {@link POUEX.Caracteristicas}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createCaracteristicasAdapter()
  {
    if (caracteristicasItemProvider == null)
    {
      caracteristicasItemProvider = new CaracteristicasItemProvider(this);
    }

    return caracteristicasItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link POUEX.Acciones} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected AccionesItemProvider accionesItemProvider;

  /**
   * This creates an adapter for a {@link POUEX.Acciones}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createAccionesAdapter()
  {
    if (accionesItemProvider == null)
    {
      accionesItemProvider = new AccionesItemProvider(this);
    }

    return accionesItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link POUEX.Efectos} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected EfectosItemProvider efectosItemProvider;

  /**
   * This creates an adapter for a {@link POUEX.Efectos}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createEfectosAdapter()
  {
    if (efectosItemProvider == null)
    {
      efectosItemProvider = new EfectosItemProvider(this);
    }

    return efectosItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link POUEX.Estados} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected EstadosItemProvider estadosItemProvider;

  /**
   * This creates an adapter for a {@link POUEX.Estados}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createEstadosAdapter()
  {
    if (estadosItemProvider == null)
    {
      estadosItemProvider = new EstadosItemProvider(this);
    }

    return estadosItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link POUEX.Transiciones} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected TransicionesItemProvider transicionesItemProvider;

  /**
   * This creates an adapter for a {@link POUEX.Transiciones}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createTransicionesAdapter()
  {
    if (transicionesItemProvider == null)
    {
      transicionesItemProvider = new TransicionesItemProvider(this);
    }

    return transicionesItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link POUEX.Fisicas} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected FisicasItemProvider fisicasItemProvider;

  /**
   * This creates an adapter for a {@link POUEX.Fisicas}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createFisicasAdapter()
  {
    if (fisicasItemProvider == null)
    {
      fisicasItemProvider = new FisicasItemProvider(this);
    }

    return fisicasItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link POUEX.Emocionales} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected EmocionalesItemProvider emocionalesItemProvider;

  /**
   * This creates an adapter for a {@link POUEX.Emocionales}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createEmocionalesAdapter()
  {
    if (emocionalesItemProvider == null)
    {
      emocionalesItemProvider = new EmocionalesItemProvider(this);
    }

    return emocionalesItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link POUEX.Normales} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected NormalesItemProvider normalesItemProvider;

  /**
   * This creates an adapter for a {@link POUEX.Normales}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createNormalesAdapter()
  {
    if (normalesItemProvider == null)
    {
      normalesItemProvider = new NormalesItemProvider(this);
    }

    return normalesItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link POUEX.Criticos} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected CriticosItemProvider criticosItemProvider;

  /**
   * This creates an adapter for a {@link POUEX.Criticos}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createCriticosAdapter()
  {
    if (criticosItemProvider == null)
    {
      criticosItemProvider = new CriticosItemProvider(this);
    }

    return criticosItemProvider;
  }

  /**
   * This returns the root adapter factory that contains this factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ComposeableAdapterFactory getRootAdapterFactory()
  {
    return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
  }

  /**
   * This sets the composed adapter factory that contains this factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory)
  {
    this.parentAdapterFactory = parentAdapterFactory;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object type)
  {
    return supportedTypes.contains(type) || super.isFactoryForType(type);
  }

  /**
   * This implementation substitutes the factory itself as the key for the adapter.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter adapt(Notifier notifier, Object type)
  {
    return super.adapt(notifier, this);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object adapt(Object object, Object type)
  {
    if (isFactoryForType(type))
    {
      Object adapter = super.adapt(object, type);
      if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter)))
      {
        return adapter;
      }
    }

    return null;
  }

  /**
   * This adds a listener.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void addListener(INotifyChangedListener notifyChangedListener)
  {
    changeNotifier.addListener(notifyChangedListener);
  }

  /**
   * This removes a listener.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void removeListener(INotifyChangedListener notifyChangedListener)
  {
    changeNotifier.removeListener(notifyChangedListener);
  }

  /**
   * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void fireNotifyChanged(Notification notification)
  {
    changeNotifier.fireNotifyChanged(notification);

    if (parentAdapterFactory != null)
    {
      parentAdapterFactory.fireNotifyChanged(notification);
    }
  }

  /**
   * This disposes all of the item providers created by this factory. 
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void dispose()
  {
    if (mascotaItemProvider != null) mascotaItemProvider.dispose();
    if (caracteristicasItemProvider != null) caracteristicasItemProvider.dispose();
    if (accionesItemProvider != null) accionesItemProvider.dispose();
    if (efectosItemProvider != null) efectosItemProvider.dispose();
    if (estadosItemProvider != null) estadosItemProvider.dispose();
    if (transicionesItemProvider != null) transicionesItemProvider.dispose();
    if (fisicasItemProvider != null) fisicasItemProvider.dispose();
    if (emocionalesItemProvider != null) emocionalesItemProvider.dispose();
    if (normalesItemProvider != null) normalesItemProvider.dispose();
    if (criticosItemProvider != null) criticosItemProvider.dispose();
  }

}
